Pokemon GO ++ Settings
##################

These instructions cover the possible settings you can use in Pokemon GO ++ to feed data to your map and to let your map control your device.

Prerequisites
*************

You would need the following to get everything working:

 * Pokemon GO ++
 * A RocketMapPlusPlus map
 * An active mapper license or active donor version of Pokemon GO ++

If your RocketMapPlusPlus is running and your iPhone/iPad can reach your map in Safari, you can set up Pokemon GO ++ to communicate with your map if your donor version or your mapper license is active.
If your map can't be reached in Safari on your iOS device, make sure your map is running and that it's using `-H 0.0.0.0`

Sending data to your map
************************

Make sure your map is running and fill in the url http://yourip:yourport/webhook in the worker mode url slot, make sure you enable the 'Send Raw Protos' toggle and activate the worker mode. You can fill in 2 urls to feed multiple maps, to use your internal IP when you're at home,... But it's not needed to use the second slot.
You can play with the frequency value to change how fast Pokemon GO ++ is sending data to your map. By default, it's at 45, which means Pokemon GO ++ will keep all data in memory and sends it all at once every 45 seconds to your map. If you set it to 0, Pokemon GO ++ will send all data directly to your map as soon as your game receives the information from Niantic.
If you set up geofences, only posts from devices coming from within one of your geofences will be handled and saved into your database.
The `dont-move-map` setting in the config.ini file is used to keep the map at your fixed location from your config.ini. If you don't use this setting (which is default), your map center will be repositioned each time a device is posting data to your map.

Use your map to control your device
***********************************

To use a fetching endpoint, fill in the right url in the fetch url slot in the Pokemon GO ++ settings, make sure the worker mode is active and enable the fetch mode afterwards. See the list underneath for all possible endpoints.

These are the common parameters that you can configure in your config.ini file that are used for all your fetch endpoints. Note that you can change some by using parameters in the endpoint url itself, read more about it in each endpoint documentation.
 * maxradius: this is the radius in kilometer in which the route will be generated by the endpoint. The center for the route is always the current fake location of the device when the route is being generated, this is not using the startup location of your map. If you want to contain a device to a specific area, you need to use geofences. The default value for this setting is 0, which means there is no maxradius.
 * stepsize: this is the difference is coordinates your device will be taking each second on each fetch when using a walking algorhythm. The default value for this setting is 0.00007
 * scheduletimeout: this is the timeout in minutes before the map is resetting the scheduled route for that device. The default value for this setting is 10, which means that if a device hasn't fetched its next coordinate within 10 minutes, when it starts fetching again, the route is recalculated.
 * teleport-interval: this is the time between each teleport if you're using a teleporting endpoint. This value is in seconds. The default value is 60.
 * teleport-ignore: this is the radius in metres which is used in scheduling a teleport algorhythm. The default value is 300. Which means that if you're teleporting between gyms for raid scanning, if a gym is scheduled in your route all gyms in a 300m radius around that gym are ignored in the routing.
 * jitter: the default value for this setting is True. If jitter is enabled, your character will walk around a bit after teleporting, to make data appear faster in game.

Possible endpoints:
 * walk_spawnpoint: use http://yourip:port/walk_spawnpoint to generate a route starting from your current position and use all spawnpoints in the area around your in game location to generate a walking route between these points. The character will slowly walk from one spawnpoint to the next until it has visited all of them. Then it will regenerate a new route. This route is affected by the parameters scheduletimemout, maxradius and stepsize. You can change the these by appending them to your endpoint url. For example http://yourip:port/walk_spawnpoint?scheduletimeout=15&maxradius=10 will set the scheduletimeout to 15 minutes and the maxradius to 10km, but only for that device, without interfering with the other devices. If you have enabled geofences, the route will only use spawnpoints that fall in the same geofence in which your device currently is. Additionally a new parameter has been added that you can't set through the config.ini but only can be set through the endpoint parameters: unknown_tth=true. If you use http://yourip:port/walk_spawnpoint?unknown_tth=true the route will only use the spawnpoints in his route that don't have a known TTH yet.
 * walk_pokestop: this endpoint is the exact same thing as the walk_spawnpoint endpoint, except that this endpoint uses the pokestops in your database to generate the route instead of the spawnpoints.
 * walk_gpx: this endpoint will use a gpx file that is saved on the server. This route is affected by scheduletimeout and stepsize parameters. You can change them in the url, just like the walk_spawnpoint endpoint. You can determine fixed routes on your server by creating gpx files like 'route1.gpx', 'route2.gpx',... and use these routes by adding a 'route' parameter to the url. For example if you want to use the route from 'route2.gpx' you need to use the url http://yourip:port/walk_gpx?route=route2 . If you haven't used a 'route' parameter, the file matching <your device uuid>.gpx will be used instead. This is to create device specific routes.
 * teleport_gym: this endpoint generates the same route as the walk_spawnpoint endpoint, except it uses the gyms in your database. The difference between this routing endpoint and a walking endpoint is that the map will let your device teleport to the next point every few seconds (based on teleport_interval) instead of walking to the next point. This route is affected by the parameters scheduletimeout, maxradius, teleport_interval and teleport_ignore.
 * teleport_gpx: this endpoint lets you select a gpx route, just the same like the walk_gpx endpoint, but instead of walking to the next point, it teleports to it. This route is affected by the parameters scheduletimeout and teleport_interval.
 * scan_loc: this endpoint is the most basic endpoint and is used as fallback endpoint for all other walking endpoints in case there is no generated route for the device (meaning the gpx route wasn't found or the database doesn't have any spawnpoints or pokestops around that location with the given restrictions). This endpoint will let your character walk in squares around it's starting endpoint. This route is only affected by the maxradius and stepsize parameters.

Restricting devices
*******************

If you create a device file and link to it with `--devices-file` in your config.ini file you can give devices a friendly name. Using this file will restrict the possible devices. Only devices in that list can send data into your map and only these devices can use a fetching endpoint. See the devices\devices.txt.example file.
